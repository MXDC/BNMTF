"""
Test the performance of non-probabilistic NMF for recovering a toy dataset, 
where we vary the level of noise, and use 10% test data.
We repeat this 10 times per noise level and average that.

We use the correct number of latent factors and same priors as used to generate the data.

I, J, K = 100, 80, 10
"""

project_location = "/home/tab43/Documents/Projects/libraries/"
import sys
sys.path.append(project_location)

from BNMTF.code.nmf_np import NMF
from BNMTF.experiments.generate_toy.bnmf.generate_bnmf import try_generate_M
from ml_helpers.code.mask import calc_inverse_M

import numpy, matplotlib.pyplot as plt

##########

fractions_unknown = [ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 ]

input_folder = project_location+"BNMTF/experiments/generate_toy/bnmf/"

repeats = 10 # number of times we try each fraction
iterations = 1000
I,J,K = 100, 80, 10

init_UV = 'exponential'
expo_prior = 1/10.

metrics = ['MSE', 'R^2', 'Rp']


#'''
# Load in data
R = numpy.loadtxt(input_folder+"R.txt")


# Generate matrices M - one list of M's for each fraction
M_attempts = 100
all_Ms = [ 
    [try_generate_M(I,J,fraction,M_attempts) for r in range(0,repeats)]
    for fraction in fractions_unknown
]
all_Ms_test = [ [calc_inverse_M(M) for M in Ms] for Ms in all_Ms ]


# Make sure each M has no empty rows or columns
def check_empty_rows_columns(M,fraction):
    sums_columns = M.sum(axis=0)
    sums_rows = M.sum(axis=1)
    for i,c in enumerate(sums_rows):
        assert c != 0, "Fully unobserved row in M, row %s. Fraction %s." % (i,fraction)
    for j,c in enumerate(sums_columns):
        assert c != 0, "Fully unobserved column in M, column %s. Fraction %s." % (j,fraction)
        
for Ms,fraction in zip(all_Ms,fractions_unknown):
    for M in Ms:
        check_empty_rows_columns(M,fraction)


# We now run the VB algorithm on each of the M's for each fraction.
all_performances = {metric:[] for metric in metrics} 
average_performances = {metric:[] for metric in metrics} # averaged over repeats
for (fraction,Ms,Ms_test) in zip(fractions_unknown,all_Ms,all_Ms_test):
    print "Trying fraction %s." % fraction
    
    # Run the algorithm <repeats> times and store all the performances
    for metric in metrics:
        all_performances[metric].append([])
    for (repeat,M,M_test) in zip(range(0,repeats),Ms,Ms_test):
        print "Repeat %s of fraction %s." % (repeat+1, fraction)
    
        nmf = NMF(R,M,K)
        nmf.initialise(init_UV,expo_prior)
        nmf.run(iterations)
    
        # Measure the performances
        performances = nmf.predict(M_test)
        for metric in metrics:
            # Add this metric's performance to the list of <repeat> performances for this fraction
            all_performances[metric][-1].append(performances[metric])
            
    # Compute the average across attempts
    for metric in metrics:
        average_performances[metric].append(sum(all_performances[metric][-1])/repeats)
    
    
print "repeats=%s \nfractions_unknown = %s \nall_performances = %s \naverage_performances = %s" % \
    (repeats,fractions_unknown,all_performances,average_performances)


'''
repeats=10 
fractions_unknown = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9] 
all_performances = {'R^2': [[0.9691254745756863, 0.9633516647834863, 0.9625378123937329, 0.9639729574347011, 0.9708667597353263, 0.9623323030008397, 0.9642568532283987, 0.9620800370464972, 0.9668372779043717, 0.967522028630827], [0.9596414798585385, 0.960648248890271, -2.868297457611765e+22, 0.9218846536992177, 0.9553380225272833, 0.9033024523787523, 0.9577286625659229, 0.9634255497099328, 0.9638157082343298, 0.9642478519675127], [0.9585386758992782, 0.9629797556103429, 0.9603874912513723, 0.9606530925390091, 0.9520245872472288, 0.9562689323871152, 0.9608728305400652, 0.9549997334210606, 0.9592991143733417, 0.953523723510715], [0.9528500946759112, 0.9520318877395053, 0.9318118457163103, 0.9560912697218997, 0.9513306901289753, 0.9554649319755996, -1.8964790014198816e+22, 0.9508603134495773, 0.9511793525344068, 0.9464202206738923], [0.9403400455425556, 0.9370168521938504, 0.9365744694014086, 0.946222978752346, 0.9370039631196718, 0.9388162362775407, -1.269352469598793e+28, 0.9321536451303915, 0.9375195960634116, 0.9456375859907521], [0.8527262774463393, 0.8495462600213726, 0.897702355878298, 0.9056153597918639, -4.529478150237715e+20, 0.8014097601801279, 0.8612578262759117, 0.41204579589335477, 0.8779816435481624, 0.8618957706527776], [0.4863203469445434, -1.1300600811244412e+40, 0.3208329737596357, 0.49639383707079154, 0.5613697000683835, -9.408378605392025, 0.5814183726048874, 0.426875286066539, 0.38557464489049276, 0.6153337432958685], [-0.4269498970154475, -1.4331381971904569, -2.0662684359198185, -0.5106164927320507, -3.6012073112126304, -0.8047789231961096, -1.2738045850381985, -0.3559863471098499, -0.47592810692249543, -0.6303212124849187], [-0.18584588336589714, -0.4193538672886712, -0.17178062711953834, -0.2523190784153626, -0.23975088889232654, -1.5511667351101472, -0.10413897036137199, -0.27590387531924776, -0.16384171368768108, -0.31760510660326036]], 'MSE': [[1.3312892104648717, 1.4071811532046377, 1.4317190136571645, 1.4129315889025396, 1.3549592842438571, 1.483147999700019, 1.3665241895237261, 1.4751126474718794, 1.4319702836944068, 1.2570410968246852], [1.6512221244579126, 1.6628607717512551, 1.0151021186330168e+24, 3.1003327826899225, 1.6552129134699021, 3.9485834206169481, 1.6339455395920544, 1.4871189545115391, 1.50352088205288, 1.5062151943499944], [1.6031040059734127, 1.5047349680985247, 1.6115240232633385, 1.5371031240857753, 1.7526859974601792, 1.7890294497524235, 1.5678982328202962, 1.7439065671673988, 1.7184844723149508, 1.6044866986185355], [1.8872402550996319, 2.0101139868212665, 2.8170974078374318, 1.8884093670070556, 1.946749309758427, 1.7934494834376913, 7.0317255515350879e+23, 1.8902321342621802, 1.9635963045018634, 2.0747134839020371], [2.330206732650435, 2.3542600578505275, 2.415345500855099, 2.0945734473477207, 2.4232738709541755, 2.4884917719925896, 4.8335381089590484e+29, 2.4819461907571174, 2.432821171183432, 2.1553692446222246], [5.6132256725732379, 6.085981807926756, 3.9241283573624508, 3.6806414290877485, 1.7961869800828477e+22, 7.9943960009921167, 5.2392731427243184, 23.570235689141061, 5.0771840695803965, 5.534737029322307], [19.975867233933876, 4.4525715370544503e+41, 27.373112356315989, 19.329307148620661, 17.446158988743996, 416.94434620042216, 16.152276459470119, 23.48662795981657, 23.453082784409037, 15.344446051020212], [58.123843057107052, 96.273343571958961, 119.51558414119452, 59.829149632648459, 183.0861772083606, 71.219099947075179, 91.054354386439712, 53.054179311588989, 59.252765213340645, 63.426342304319576], [46.216482006171972, 55.06865000754393, 45.940946966758467, 48.616993290967564, 48.627658985925024, 100.94208305739855, 43.622816947243201, 50.136764141636604, 46.30212994994514, 51.515072914880314]], 'Rp': [[0.9844454176278018, 0.9816854896378886, 0.98127914696258356, 0.98187816079810675, 0.9853884967744202, 0.98102338505245623, 0.98202524565979377, 0.98090287276259758, 0.9832990380829254, 0.98365755883228012], [0.97963008556380826, 0.98020164214913896, 0.032779108299340325, 0.9608617256598192, 0.97746115158684022, 0.95203627233714627, 0.97865500794092808, 0.98157742498589351, 0.98175426855537651, 0.98199863941884369], [0.97936463020344611, 0.98135967269780977, 0.98002389607971108, 0.98015388507238843, 0.97580412479623535, 0.97816074038643497, 0.98042030383988454, 0.9774827259614014, 0.97956255287835237, 0.9767925515611714], [0.97630463643178234, 0.97579582143852384, 0.96549508530210704, 0.97793446811372586, 0.97544735548545225, 0.97766099699270703, 0.022107809623075722, 0.97528283191700971, 0.97558893251588719, 0.97297691815579856], [0.96985504761566155, 0.96831446514787656, 0.96789070739814653, 0.97315279626579032, 0.96852618837044568, 0.96931848734461334, -0.01949860738833982, 0.9660508072375662, 0.96874848049947282, 0.97271401053242534], [0.92886804740031426, 0.92509518849553762, 0.94866421885602481, 0.9539262821384622, 0.037645113577873694, 0.90297241389285898, 0.93134708460707805, 0.77902800821445917, 0.93783473937996575, 0.93100667668554948], [0.7834922643926735, 0.0087455547269864979, 0.7048854279619462, 0.77366583456545324, 0.7939247938910019, 0.29142910165142394, 0.81474716664425628, 0.75863339811022323, 0.75342910080247394, 0.82477129760552725], [0.52169899306006817, 0.43586645473909136, 0.45058831694787943, 0.5309385984251257, 0.39464224127849762, 0.51806949658165247, 0.45899527486872638, 0.57121892903875626, 0.58128538812576491, 0.54775418046611846], [0.58122659296729884, 0.51138667540951033, 0.57710955162335753, 0.56112090856719099, 0.52874557142528533, 0.46356585640488002, 0.55165626892574771, 0.53742479650791075, 0.55688364765451825, 0.55830719800723994]]} 
average_performances = {'R^2': [0.96528831687338668, -2.8682974576117652e+21, 0.95795479367795289, -1.8964790014198816e+21, -1.2693524695987931e+27, -4.5294781502377148e+19, -1.1300600811244411e+39, -1.1578999508821979, -0.36817067461635045], 'MSE': [1.3951876467687785, 1.0151021186330168e+23, 1.6432957539554836, 7.0317255515350881e+22, 4.8335381089590488e+28, 1.7961869800828478e+21, 4.4525715370544501e+40, 85.483483877403387, 53.69895982684708], 'Rp': [0.98255848121908562, 0.88069553264971334, 0.97891250834768351, 0.87945948559760689, 0.87050723830236565, 0.8276387773248125, 0.6507723940351966, 0.50110578735316813, 0.54274270674929403]}
'''


# Plot the MSE, R^2 and Rp
for metric in metrics:
    plt.figure()
    x = fractions_unknown
    y = average_performances[metric]
    plt.plot(x,y)
    plt.xlabel("Fraction missing")
    plt.ylabel(metric)