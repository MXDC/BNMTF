"""
Run the grid search method for finding the best values for K and L for BNMTF.
We use the parameters for the true priors.

For BNMTF I find that the BIC is a better estimator - the log likelihood is 
high for higher values for K and L than the true ones, same for the AIC. With
the BIC we get a nice peak just below the true K and L (for true K=L=5, at K=L=4).
"""


project_location = "/home/tab43/Documents/Projects/libraries/"
import sys
sys.path.append(project_location)

from BNMTF.experiments.generate_toy.bnmtf.generate_bnmtf import generate_dataset, try_generate_M
from BNMTF.grid_search.grid_search_bnmtf import GridSearch
from BNMTF.code.bnmtf_vb_optimised import bnmtf_vb_optimised

import numpy, matplotlib.pyplot as plt
import scipy.interpolate

##########

restarts = 2 #5
iterations = 100 #1000

I, J = 100,80
true_K, true_L = 5, 5
values_K, values_L = range(1,10+1), range(1,10+1)

#fraction_unknown = 0.1
attempts_M = 100

alpha, beta = 100., 1. #1., 1.
tau = alpha / beta
lambdaF = numpy.ones((I,true_K))
lambdaS = numpy.ones((true_K,true_L))
lambdaG = numpy.ones((J,true_L))

classifier = bnmtf_vb_optimised
initFG = 'kmeans'
initS = 'random'

# Generate data
(_,_,_,_,_,R) = generate_dataset(I,J,true_K,true_L,lambdaF,lambdaS,lambdaG,tau)
M = numpy.ones((I,J))
#M = try_generate_M(I,J,fraction_unknown,attempts_M)

# Run the line search. The priors lambdaF,S,G need to be a single value (recall K,L is unknown)
priors = { 'alpha':alpha, 'beta':beta, 'lambdaF':lambdaF[0,0]/10, 'lambdaS':lambdaS[0,0]/10, 'lambdaG':lambdaG[0,0]/10 }
grid_search = GridSearch(classifier,values_K,values_L,R,M,priors,initS,initFG,iterations,restarts)
grid_search.search()

# Plot the performances of all three metrics
metrics = ['loglikelihood', 'BIC', 'AIC','MSE']
for metric in metrics:
    # Make three lists of indices X,Y,Z (K,L,metric)
    values = numpy.array(grid_search.all_values(metric)).flatten()
    list_values_K = numpy.array([values_K for l in range(0,len(values_L))]).T.flatten()
    list_values_L = numpy.array([values_L for k in range(0,len(values_K))]).flatten()
    
    # Set up a regular grid of interpolation points
    Ki, Li = (numpy.linspace(min(list_values_K), max(list_values_K), 100), 
              numpy.linspace(min(list_values_L), max(list_values_L), 100))
    Ki, Li = numpy.meshgrid(Ki, Li)
    
    # Interpolate
    rbf = scipy.interpolate.Rbf(list_values_K, list_values_L, values, function='linear')
    values_i = rbf(Ki, Li)
    
    # Plot
    plt.figure()
    plt.imshow(values_i, #cmap='jet_r',
               vmin=min(values), vmax=max(values), origin='lower',
               extent=[min(values_K), max(values_K), min(values_L), max(values_L)])
    plt.scatter(list_values_K, list_values_L, c=values)
    plt.colorbar()
    plt.title("Metric: %s." % metric)   
    plt.xlabel("K")     
    plt.ylabel("L")  
    plt.show()
    
    # Print the best value
    best_K,best_L = grid_search.best_value(metric)
    print "Best K,L for metric %s: %s,%s." % (metric,best_K,best_L)
    
    
# Also print out all values in a dictionary
all_values = {}
for metric in metrics:
    all_values[metric] = list(grid_search.all_values(metric).flatten())
    
print "all_values = %s \nvalues_K=%s \nvalues_L=%s" % (all_values,values_K,values_L)

'''
all_values = {'MSE': [26.836310936032159, 26.836317787312776, 26.83631063183369, 26.836312730519708, 26.836315264129656, 26.836305750477297, 26.836310599736198, 26.836311805304295, 26.836303984872472, 26.836309957512665, 26.836322771952361, 7.215232296797609, 7.227009972172203, 7.2249744580100606, 7.2455340774367327, 7.2413693565325055, 7.2112342244349721, 7.2213413462770859, 7.2105765993608255, 7.2123894248053819, 26.836341032557151, 7.2121625167340442, 1.3764643485168655, 0.61331867153508923, 0.59893241144670828, 0.59999570233352162, 0.60394162884695801, 0.5989294991647417, 0.60053695444987232, 0.61037415196966838, 26.836315010667025, 7.2125508425143394, 0.60253179808130219, 0.46432646490131557, 0.22615168627141832, 0.1762272466094689, 0.59519277977674312, 0.54370671434483564, 0.12704185238070506, 0.25551808636090489, 26.836591669852655, 7.208362756143055, 0.60700070115483651, 0.16688456009627131, 0.14397559601261969, 0.069150749082463547, 0.082645057906707203, 0.044697796643346818, 0.033162587256431106, 0.057819813167531452, 26.837042397999699, 7.2107021983352864, 0.59486182537368171, 0.5392354764045465, 0.38758391302515555, 0.043604617499287547, 0.035493464719428228, 0.040455736343932083, 0.032113578286818621, 0.032161890730631908, 26.836597808916054, 7.2075614229807501, 0.5970337042159346, 0.076736188600992808, 0.11313359117998074, 0.060331492284692173, 0.032828153046102898, 0.034238894081271079, 0.033599281593171465, 0.037521346723050596, 26.836599171980996, 7.2119077776656919, 0.59774086018655637, 0.10972996938591995, 0.049467795718742547, 0.036453619780349653, 0.036795148310913774, 0.033387428351598358, 0.033680740434037057, 0.036508211379088586, 26.836339779769595, 7.207057012707665, 0.59860604279055363, 0.046062709981255244, 0.03845765406323224, 0.047877145210047524, 0.032020135951996404, 0.044028163129608396, 0.032767279212854349, 0.04100965264874485, 26.836704035694932, 7.2077434477546021, 0.59590158138313398, 0.05975806554320371, 0.057332105192432217, 0.03732768946656892, 0.033631390465279978, 0.033605359218032156, 0.03754991698757127, 0.039213918636088758], 'loglikelihood': [-24511.030720846749, -24511.139572672484, -24511.028395067617, -24511.02751139025, -24511.153473397251, -24511.12579363483, -24511.063823881199, -24511.64090449582, -24511.291362551288, -24511.59323586653, -24511.027937983628, -19257.608373867253, -19265.14556544034, -19264.017282773162, -19278.60020241866, -19278.637743287363, -19262.193955604067, -19265.394482367323, -19261.43708645663, -19262.63491910954, -24511.028606590735, -19255.932646288715, -12633.456150319875, -9402.2367284830161, -9310.0483575096059, -9319.4530094739202, -9349.3175276132624, -9319.9289247898942, -9334.3470906781604, -9397.3090161075634, -24511.027873368741, -19258.25338232124, -9331.7935487258146, -8291.7671371397864, -5417.4958090424752, -4423.7433992033129, -9296.1134133526321, -8938.3938232942564, -3126.4200139405248, -5919.7604930141515, -24511.290938520739, -19256.5609516023, -9363.0956640662025, -4203.2042494271072, -3615.8447958870543, -690.01163416758891, -1405.3106989831313, 1048.1838413460728, 2234.6535779069136, 6.458482906131394, -24512.2290861642, -19257.994168517107, -9288.1687127511523, -8897.9817033183463, -7581.6379394348887, 1149.2765406821077, 1966.9747927439794, 1437.5914220634459, 2354.605260388149, 2338.5035016177985, -24511.307246288176, -19260.514730665993, -9307.1684263866919, -1106.4145208634154, -2664.0783272086228, -155.25974259421992, 2270.9359281403968, 2094.9713354408814, 2165.231670950971, 1716.5684337694556, -24511.311669835897, -19259.755459371387, -9315.6559996944598, -2544.1948458698662, 637.62302904239095, 1850.7099825499536, 1807.1236221981253, 2186.9805957934864, 2143.2510192523378, 1814.5887793427351, -24511.024127364504, -19256.562958109313, -9329.8512347831311, 920.88141192220291, 1634.9484305286041, 754.12514488944589, 2352.4366128057263, 1072.2766173186842, 2241.2326255857588, 1338.3619194343682, -24511.501532387618, -19261.532438758659, -9312.0223452646642, -131.77606974459331, 27.44171476827205, 1737.2616033099425, 2145.7275214165666, 2139.8869899051701, 1688.5129307335333, 1507.3062136781937], 'AIC': [49384.061441693499, 49546.279145344968, 49708.056790135233, 49870.0550227805, 50032.306946794502, 50194.25158726966, 50356.127647762398, 50519.28180899164, 50680.582725102577, 50843.186471733061, 49586.055875967257, 39243.216747734506, 39422.29113088068, 39584.034565546324, 39777.20040483732, 39941.275486574727, 40072.387911208134, 40242.788964734646, 40398.87417291326, 40565.269838219079, 49788.05721318147, 39443.865292577429, 26364.912300639749, 20068.473456966032, 20050.096715019212, 20234.90601894784, 20460.635055226525, 20567.857849579788, 20762.694181356321, 21054.618032215127, 49990.055746737482, 39652.50676464248, 19967.587097451629, 18055.534274279573, 12474.99161808495, 10655.486798406626, 20568.226826705264, 20020.787646588513, 8564.8400278810495, 14319.520986028303, 50192.581877041477, 39853.121903204599, 20236.191328132405, 10086.408498854214, 9081.6895917741094, 3400.0232683351778, 5000.6213979662625, 263.63231730785446, -1939.3071558138272, 2687.0830341877372, 50396.458172328399, 40059.988337034214, 20292.337425502305, 19683.963406636693, 17223.275878869776, -66.553081364215359, -1529.9495854879588, -299.18284412689172, -1961.2105207762979, -1757.007003235597, 50596.614492576351, 40269.029461331986, 20536.336852773384, 4308.8290417268308, 7598.1566544172456, 2754.5194851884398, -1923.8718562807935, -1397.9426708817628, -1364.4633419019419, -293.13686753891125, 50798.623339671794, 40471.510918742773, 20759.31199938892, 7392.3896917397324, 1204.7539419152181, -1045.4199650999071, -782.24724439625061, -1365.9611915869727, -1102.5020385046755, -269.1775586854701, 51000.048254729008, 40669.125916218625, 20993.702469566262, 670.23717615559417, -579.8968610572083, 1359.7497102211082, -1658.8732256114527, 1079.4467653626316, -1080.4652511715176, 903.27616113126351, 51203.003064775236, 40883.064877517318, 21164.044690529328, 2983.5521394891866, 2845.1165704634559, -394.52320661988506, -1031.4550428331331, -839.77397981034028, 242.97413853293347, 785.38757264361266], 'BIC': [50648.744066233317, 51376.924712358406, 52104.665299622291, 52832.626474741177, 53560.841341228799, 54288.748924177577, 55016.587927143933, 55745.705030846795, 56472.968889431351, 57201.535578535455, 51556.445379393932, 41786.556390455466, 42538.580912895923, 43273.274486855844, 44039.390465441124, 44776.415686472814, 45480.478250400498, 46223.829443221293, 46952.864790694191, 47692.210595294295, 52464.153595495009, 42699.899011005909, 30200.883355183174, 24484.381847624398, 25045.942441792522, 25810.689081836095, 26616.355454229724, 27303.515584697932, 28078.289252589406, 28950.150439563156, 53371.859007937877, 43621.23455877848, 24523.239424523235, 23198.111134286784, 18204.493011027767, 16971.912724285048, 27471.577285519292, 27511.062638338146, 16642.03955256629, 22983.64504364915, 54280.092017128729, 44534.543773048121, 25511.524927732193, 15955.653828210272, 15544.846650886433, 10457.092057203772, 12651.601916591122, 8508.524565688982, 6899.4968223235683, 12119.798742081401, 55189.675191302515, 45454.104282585256, 26287.352297630277, 26279.877205341596, 24420.08860415161, 7731.1585704945473, 6868.6609929477327, 8700.3266608857302, 7639.1979108132527, 8444.3003549308851, 56095.538390437323, 46375.839482590549, 27251.032997429538, 11631.411309780578, 15528.625045868584, 11292.874000037369, 7222.3687819657298, 8356.1840907623518, 8997.5495431397649, 10676.762140900386, 57003.25411641963, 47291.015015708857, 28193.689416573259, 15441.640429142326, 9868.8779995360637, 8233.5774127391924, 9111.6234536611028, 9142.7828266886354, 10021.115299989186, 11469.313100026644, 57910.385910363701, 48201.32408889223, 29147.761159278787, 9446.1563829070328, 8817.8828627331459, 11379.389951050376, 8982.6275322567326, 12342.808040269731, 10804.756540774499, 13410.358470116194, 58819.047599296784, 49127.957125898443, 30037.784652770035, 12486.139815589471, 12976.551960423316, 10365.759897199554, 10357.675774845882, 11178.204551728253, 12889.800383931106, 14061.06153190136]}
values_K=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
values_L=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
'''